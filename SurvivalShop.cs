//Reference: Facepunch.Sqlite
//Reference: UnityEngine.UnityWebRequestModule
//Copyright SurvivalShop.org
using System;using System.Text;using System.Collections.Generic;using System.Security.Cryptography;using Oxide.Game.Rust.Libraries;using Oxide.Game.Rust.Cui;using UnityEngine;using UnityEngine.Networking;using Newtonsoft.Json;using Newtonsoft.Json.Linq;namespace Oxide.Plugins{class SurvivalShopPluginInfo{public const string Name="SurvivalShop";public const string Version="2.0.0 beta 32 (Rust)";public const string Copyright="SurvivalShop.org";}[Info(SurvivalShopPluginInfo.Name,SurvivalShopPluginInfo.Copyright,SurvivalShopPluginInfo.Version)][Description(SurvivalShopPluginInfo.Name)]public class SurvivalShop:RustPlugin{SurvivalShop Plugin;Dictionary<string,PlayerData>Players=new Dictionary<string,PlayerData>();public class PlayerData{public BasePlayer Player;public string PlayerId;public JArray Inventory;public int InventoryCount;public DateTime InventoryTime;public int InventoryPage;public int InventoryTotalPages;public Lang Language;SurvivalShop SurvivalShop;public Lang Locale{get{return SurvivalShop.Locale(Player);}}public PlayerData(SurvivalShop shop,BasePlayer player){SurvivalShop=shop;Player=player;PlayerId=player.UserIDString;if(PlayerId==null)PlayerId="*anonymous";}}new PlayerData Player(BasePlayer player){PlayerData data;if(!Players.TryGetValue(player.UserIDString,out data)){data=new PlayerData(this,player);Players[player.UserIDString]=data;}return data;}public string SiteId;public string ApiKey;public bool DebugEnabled;public bool ServerInitialized;public Dictionary<string,List<ApiRequest>>ApiRequests;public List<ApiResponse>ApiResponses;public bool ShopRegistered;public string ShopServerId;public bool ShopServerPremium;public string ShopHello;DateTime NextRegister;DateTime NextTimeoutCheck;public class ApiRequest{public SurvivalShop Plugin;public string MethodName;public PlayerData Player;public UnityWebRequest Request;public DateTime StartTime;public DateTime TimeoutTime;public Coroutine Routine;public string BaseUrl="https://api.survivalshop.org/";public Dictionary<string,object>Data;public ApiFunc Completed;public string RequestFor;public bool Canceled;System.Collections.IEnumerator ExecWait(ApiError failed=null){yield return Request.SendWebRequest();try{lock(Plugin.ApiRequests){List<ApiRequest>requests;if(Plugin.ApiRequests.TryGetValue(RequestFor,out requests))requests.Remove(this);}JObject response_data=null;JToken error_code=null;var error=Request.error;var text=Request.downloadHandler.text;if(error==null&&(text.Length==0||text.Length>1024*1024))error="Response is null or too large";if(error==null){var data=Request.downloadHandler.text+"";try{response_data=JObject.Parse(Request.downloadHandler.text);}catch(Exception e){error="Failed to parse response: "+e.Message+". Data was (first 50 bytes): '"+(data.Length>50?data.Substring(0,50):data)+"'";}}if(error==null&&response_data==null)error="Response data is null";if(error==null&&response_data.TryGetValue("error_code",out error_code))error=response_data["error_msg"].ToString();if(!string.IsNullOrEmpty(error)){Plugin.Error("Api request {0} failed for {1}: {2}",MethodName,RequestFor,error);try{failed?.Invoke(this,error);}catch(Exception e){Plugin.Error(e,"ApiError");}}else{Plugin.Debug("Finished request {0} for {1}: {2}",MethodName,RequestFor,Request.downloadHandler.text,Request.error);if(!Canceled)lock(Plugin.ApiResponses)Plugin.ApiResponses.Add(new ApiResponse(this,response_data,Completed));}Request=null;}catch(Exception e){Plugin.Error("Failed to run request {0} for {1}: {2}",MethodName,RequestFor,e.Message);}}public void Execute(ApiError failed=null){Plugin.Debug("Started request {0} for {1}",MethodName,RequestFor);lock(Plugin.ApiRequests){List<ApiRequest>requests;if(Plugin.ApiRequests.TryGetValue(RequestFor,out requests))requests.Add(this);else{requests=new List<ApiRequest>();requests.Add(this);Plugin.ApiRequests.Add(RequestFor,requests);}}var salt="salt";var data_json=JsonConvert.SerializeObject(Data,Formatting.None);var bytes=new SHA256CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(data_json+Plugin.ApiKey+salt));var hex=new StringBuilder(bytes.Length*2);for(int i=0;i<bytes.Length;i++)hex.AppendFormat("{0:x2}",bytes[i]);Data["__sign"]=hex.ToString()+":"+Plugin.SiteId+":"+salt;var serialized_data=JsonConvert.SerializeObject(Data,Formatting.None);Plugin.Debug("Api request data {0}",serialized_data);Request=new UnityWebRequest(BaseUrl+MethodName,"POST");Request.uploadHandler=new UploadHandlerRaw(Encoding.UTF8.GetBytes(serialized_data));Request.downloadHandler=new DownloadHandlerBuffer();Request.SetRequestHeader("Content-Type","application/json");Routine=Rust.Global.Runner.StartCoroutine(ExecWait(failed));}public void Cancel(){Canceled=true;Plugin.Debug("Cancelling request {0} for {1}",MethodName,RequestFor);if(Routine!=null)Rust.Global.Runner.StopCoroutine(Routine);Routine=null;}public ApiRequest(SurvivalShop shop,PlayerData player,string method_name,Dictionary<string,object>data,ApiFunc completed){Plugin=shop;Player=player;RequestFor=Player==null?"*":Player.PlayerId;StartTime=DateTime.Now;TimeoutTime=StartTime.AddSeconds(30);MethodName=method_name;Data=data;Completed=completed;}}public class ApiResponse{public ApiRequest Request;public JObject Data;public ApiFunc Completed;public ApiResponse(ApiRequest request,JObject data,ApiFunc completed){Request=request;Data=data;Completed=completed;}}public delegate void ApiFunc(ApiResponse result);public delegate void ApiError(ApiRequest request,string error);void ApiExec(PlayerData player,string method_name,Dictionary<string,object>data,ApiFunc completed,ApiError failed=null){new ApiRequest(this,player,method_name,data,completed).Execute(failed);}void ApiFailed(PlayerData player,ApiRequest request,string error){if(!string.IsNullOrEmpty(error)&&error.Contains("Mesh not exist"))Chat(player,player.Locale.MeshNotExists);else Chat(player,player.Locale.ApiRequestError);}void ApiInit(){ApiRequests=new Dictionary<string,List<ApiRequest>>();ApiResponses=new List<ApiResponse>();}void ApiFrame(){if(DateTime.Now>NextRegister&&!string.IsNullOrEmpty(SiteId)&&!string.IsNullOrEmpty(ApiKey)){var was_registered=ShopRegistered;ApiExec(null,"servers.register2",new Dictionary<string,object>(){{"siteId",SiteId},{"serverData",new{game="RUST",name=ConVar.Server.hostname,port=ConVar.Server.port,online=BasePlayer.activePlayerList.Count,maxplayers=ConVar.Server.maxplayers,pluginName=SurvivalShopPluginInfo.Name,pluginVersion=SurvivalShopPluginInfo.Version}}},(r)=>{var response=r.Data["response"];ShopRegistered=true;ShopServerId=response["id"].ToString();ShopServerPremium=(bool)response["premium"];ShopHello=response["hello"].ToString();if(!was_registered)Plugin.Notify(Locale().ServerRegister,SiteId,ShopServerId);},(r,err)=>{ShopRegistered=false;});NextRegister=DateTime.Now.AddMinutes(4);}if(DateTime.Now>NextTimeoutCheck){var now=DateTime.Now;lock(ApiRequests){foreach(var kv in ApiRequests)for(int i=0;i<kv.Value.Count;i++){if(now>kv.Value[i].TimeoutTime){kv.Value[i].Cancel();kv.Value.Remove(kv.Value[i]);}}}NextTimeoutCheck=DateTime.Now.AddMinutes(2);}}void ApiTick(){lock(ApiResponses)if(ApiResponses.Count>0){for(int i=0;i<ApiResponses.Count;i++){try{ApiResponses[i].Completed(ApiResponses[i]);}catch(Exception e){Error(e,"ApiTick ("+ApiResponses[i].Request.MethodName+")");}}ApiResponses.Clear();}}void ApiUnload(){ApiRequests.Clear();}void Notify(string format,params object[]args){var msg=string.Format(format,args);LogToFile("log",msg,Plugin);Puts(msg);}void Debug(string format,params object[]args){if(!DebugEnabled)return;var msg=string.Format(format,args);LogToFile("log","DEBUG "+msg,Plugin);Puts("Debug "+msg);}void Error(string format,params object[]args){var msg=string.Format(format,args);LogToFile("log","ERROR "+msg,Plugin);LogToFile("error","ERROR "+msg,Plugin);PrintError(msg);}void Error(Exception e,string function_name){var msg="In "+function_name+": "+e.Message+", callstack: "+e.StackTrace;LogToFile("log","ERROR "+msg,Plugin);LogToFile("error","ERROR "+msg,Plugin);PrintError(msg);}void Warning(string format,params object[]args){var msg=string.Format(format,args);LogToFile("log","WARNING "+msg,Plugin);PrintWarning(msg);}void Chat(BasePlayer player,string message,params object[]args){player.ChatMessage("SurvivalShop: "+string.Format(message,args));}void Chat(PlayerData player,string message,params object[]args){Chat(player.Player,message,args);}Lang LocaleEn;Lang LocaleRu;Lang LocaleCurrent;public class Lang{public virtual string Locale=>"EN";public virtual string Shop=>"Shop";public virtual string ConfigFailedToLoad=>"Failed to load config: {0}";public virtual string InventoryFailedToShow=>"Failed to show inventory: {0} ({1})";public virtual string InventoryFailedToTake=>"Failed to take inventory: {0} ({1})";public virtual string InventoryFailedToTakeAll=>"Failed to take all inventory: {0} ({1})";public virtual string YourSurvivalShopInventory=>"Your SurvivalShop Inventory";public virtual string PageXofY=>"Page: {0} of {1}";public virtual string ShopNotRegistered=>"Sorry, shop is not registered";public virtual string ShopUsage=>"Usage {0} <Page number>";public virtual string ShopGiveUsage=>"Usage {0} <Index> [Quantity]";public virtual string NoSuchPosition=>"Sorry, no such inventory position";public virtual string PlayerNotFound=>"Sorry, player not found";public virtual string SlotNotFound=>"Sorry, slot not found";public virtual string MeshNotExists=>"Sorry, store account not found. Please log in to this server's store site and try again.";public virtual string ApiRequestError=>"Sorry, request error occured, please try again later";public virtual string RuntimeError=>"Sorry, runtime error occured, please try again later";public virtual string FailedToUseInventory=>"Sorry, failed to use inventory";public virtual string FailedToUseSlot=>"sorry, failed to use slot";public virtual string Delivered_0_1=>"Delivered: {0} {1}";public virtual string Unlocked_0_1=>"Blueprint unlocked: {0} {1}";public virtual string CountNotEnough=>"Sorry, not enough items in inventory";public virtual string Purshase_0_for_1_=>"purshase '{0}' for {1} - ";public virtual string YourCharacterMustBeConcious=>"Your character must be conscious";public virtual string CannotDeliver_0_1=>"Sorry, failed to deliver {0} - {1}";public virtual string CannotUnlock_0_1=>"Sorry, failed to unlock {0} - {1}";public virtual string DeliveryError=>"delivery error";public virtual string UnlockError=>"unlock error";public virtual string RequireMoreSlots=>"need to free up {0} inventory slots";public virtual string ItemNotFound=>"item {0} not found";public virtual string LocaleSetUp=>"Switched language to EN";public virtual string LocaleFailed=>"Sorry, failed to switch language: {0}";public virtual string SetupOk=>"Shop keys written succesfully! Type survivalshop.status for detailed state information";public virtual string Status01=>"Registered: {0} (siteId {1})";public virtual string Status02=>"Server ID: {0} (hello {1})";public virtual string Status03=>"Locale: {0}";public virtual string Status04=>"Players: {0}";public virtual string Status05=>"Active requests: {0}";public virtual string ShopSetupUsage=>"Usage {0} <SiteId> <SiteKey> [Locale]";public virtual string ServerRegister=>"Shop registered with site {0}, server Id {1}";public virtual string TitleHelp=>"Take item: /give <position> [count] or /giveall [position]";public virtual string TitleHelp2=>"Switch page: /shop <page>";public virtual string TitleHelp3=>"Switch language: /en, /ru";public virtual string ShopHello=>"Welcome! Use /shop chat command to view your inventory";}public class LangRu:Lang{public override string Locale=>"RU";public override string Shop=>"Магазин";public override string ConfigFailedToLoad=>"Ошибка загрузки конфигурации: {0}";public override string InventoryFailedToShow=>"Ошибка показа инвентаря: {0} ({1})";public override string InventoryFailedToTake=>"Ошибка выдачи инвентаря: {0} ({1})";public override string InventoryFailedToTakeAll=>"Ошибка выдачи всего инвентаря: {0} ({1})";public override string YourSurvivalShopInventory=>"Ваш инвентарь SurvivalShop";public override string PageXofY=>"Страница: {0} из {1}";public override string ShopNotRegistered=>"Извините, магазин не зарегистрирован";public override string ShopUsage=>"Формат {0} <Номер страницы>";public override string ShopGiveUsage=>"Формат {0} <Индекс> [Количество] или !в <Индекс> [Количество]";public override string NoSuchPosition=>"Извините, нет такой позиции в инвентаре";public override string PlayerNotFound=>"Извините, игрок не найден";public override string SlotNotFound=>"Извините, cлот не найден";public override string MeshNotExists=>"Извините, счет в магазине не найден. Пожалуйста выполните вход на сайте магазина этого сервера и попробуйте снова.";public override string ApiRequestError=>"Извините, произошла ошибка запроса, попробуйте еще раз позднее";public override string RuntimeError=>"Извините, произошла ошибка выполнения, попробуйте еще раз позднее";public override string FailedToUseInventory=>"Извините, не удалось использовать инвентарь";public override string FailedToUseSlot=>"Извините, не удалось использовать слот";public override string Delivered_0_1=>"Выдано: {0} {1}";public override string Unlocked_0_1=>"Чертеж разблокирован: {0} {1}";public override string CountNotEnough=>"Извините, недостаточно предметов в инвентаре";public override string Purshase_0_for_1_=>"покупка '{0}' для {1} - ";public override string YourCharacterMustBeConcious=>"Ваш персонаж должен быть в сознании";public override string CannotDeliver_0_1=>"Извините, не удалось выдать {0} - {1}";public override string CannotUnlock_0_1=>"Извините, не удалось разблокировать {0} - {1}";public override string DeliveryError=>"ошибка при выдаче";public override string UnlockError=>"ошибка при разблокировке";public override string RequireMoreSlots=>"необходимо освободить {0} слотов в инвентаре";public override string ItemNotFound=>"предмет {0} не найден";public override string LocaleSetUp=>"Установлен язык RU";public override string LocaleFailed=>"Извините, не удалось установить язык: {0}";public override string SetupOk=>"Ключи прописаны успешно! Введите survivalshop.status для получения подробной информации о состоянии";public override string Status01=>"Регистрация: {0} (siteId {1})";public override string Status02=>"ID сервера: {0} (приветствие {1})";public override string Status03=>"Локализация: {0}";public override string Status04=>"Игроки: {0}";public override string Status05=>"Активные запросы: {0}";public override string ShopSetupUsage=>"Формат {0} <SiteId> <SiteKey> [Locale]";public override string ServerRegister=>"Магазин зарегистрирован с ID сайта {0}, ID сервера {1}";public override string TitleHelp=>"Получить предмет: /give <позиция> [кол-во] или /giveall [позиция] или /в <позиция> [кол-во] или /вв [позиция]";public override string TitleHelp2=>"Переключить страницу: /shop <page> или /м <страница>";public override string TitleHelp3=>"Переключить язык: /en, /ru";public override string ShopHello=>"Добро пожаловать! Используйте команду чата /shop или /м для просмотра Вашего инвентаря";}void LocaleInit(){LocaleEn=new Lang();LocaleRu=new LangRu();LocaleCurrent=LocaleEn;}Lang Locale(){return LocaleCurrent;}Lang Locale(PlayerData player){if(player.Language==null)return Locale();return player.Language;}Lang Locale(BasePlayer player){return Locale(Player(player));}void LocaleSet(PlayerData player,Lang locale){player.Language=locale;Chat(player,Locale(player).LocaleSetUp);}void LocaleUnload(){}class Configuration{[JsonProperty("siteId")]public string SiteId;[JsonProperty("siteKey")]public string SiteKey;[JsonProperty("locale")]public string Locale;[JsonProperty("debug")]public bool Debug=false;}protected override void LoadConfig(){base.LoadConfig();var config=new Configuration();try{config=Config.ReadObject<Configuration>();}catch(Exception e){Error(e,"LoadConfig");}SiteId=config.SiteId;ApiKey=config.SiteKey;DebugEnabled=config.Debug;var locale=config.Locale;if(locale!=null)switch(locale.ToLower()){case"en":LocaleCurrent=LocaleEn;break;case"ru":LocaleCurrent=LocaleRu;break;}Debug("SITE_ID: {0}",SiteId);NextRegister=DateTime.MinValue;}protected void SetupConfig(string site_id,string site_key,string locale){var config=new Configuration();try{config=Config.ReadObject<Configuration>();}catch(Exception e){Error(e,"LoadConfig");}config.SiteId=site_id;config.SiteKey=site_key;if(locale!=null)config.Locale=locale;Config.WriteObject<Configuration>(config);LoadConfig();}string InvName="InventoryCUI";DateTime NextTimerUpdate;public class ItemAffixes{public bool IsBlueprint;static string[]BlueprintAffixes=new string[]{"чертеж","чертёж","blueprint","[ч]","[b]"};internal ItemAffixes(string title){for(int i=0;i<BlueprintAffixes.Length;i++)if(title.Contains(BlueprintAffixes[i],System.Globalization.CompareOptions.OrdinalIgnoreCase)){IsBlueprint=true;break;}}}void InvInit(){}void InvDraw(PlayerData player,bool redraw=false){try{var ui=new CuiElementContainer();var font_size=23;var fade_in=redraw?0.0f:0.33f;ui.Add(new CuiPanel{Image={Color="0 0 0 0.8",FadeIn=fade_in},RectTransform={AnchorMin="0.17 0.3",AnchorMax="0.83 0.95"}},"Hud",InvName);ui.Add(new CuiLabel{Text={Text=Locale(player).YourSurvivalShopInventory,Align=TextAnchor.UpperCenter,Color="1 1 1 1",FadeIn=fade_in,FontSize=font_size},RectTransform={AnchorMin="0.05 0.05",AnchorMax="0.95 0.95"}},InvName,InvName+"Label");var lines="\n";for(int i=0;i<player.Inventory.Count;i++){var item=(JObject)player.Inventory[i];var count=(int)item["count"];var title=item["title"].ToString();if(title.Length>50)title=title.Substring(0,50)+"...";else while(title.Length<53)title=title+" ";ui.Add(new CuiLabel{Text={Text=lines+(i<9?"  ":"")+(i+1)+". "+title,Align=TextAnchor.UpperLeft,Color=count<=0?"0.3 0.3 0.3 1":"1 1 1 1",FadeIn=fade_in,FontSize=font_size},RectTransform={AnchorMin="0.05 0.05",AnchorMax="0.95 0.95",OffsetMin="0.05 0.05",OffsetMax="0.05 0.05"}},InvName,InvName+"Item"+i);ui.Add(new CuiLabel{Text={Text=lines+"                                                                                                                                x"+count.ToString(),Align=TextAnchor.UpperLeft,Color=count<=0?"0.3 0.3 0.3 1":"1 1 1 1",FadeIn=fade_in,FontSize=font_size},RectTransform={AnchorMin="0.05 0.05",AnchorMax="0.95 0.95",OffsetMin="0.05 0.05",OffsetMax="0.05 0.05"}},InvName,InvName+"Item"+i);lines+="\n";}ui.Add(new CuiLabel{Text={Text="\n\n\n\n\n\n\n\n\n\n\n\n"+string.Format(Locale(player).PageXofY,player.InventoryPage+1,player.InventoryTotalPages),Align=TextAnchor.UpperLeft,Color="1 1 1 1",FadeIn=fade_in,FontSize=font_size},RectTransform={AnchorMin="0.05 0.05",AnchorMax="0.95 0.95"}},InvName,InvName+"Label");ui.Add(new CuiLabel{Text={Text="\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"+string.Format(Locale(player).TitleHelp),Align=TextAnchor.UpperLeft,Color="1 1 1 1",FadeIn=fade_in,FontSize=14},RectTransform={AnchorMin="0.05 0.05",AnchorMax="0.95 0.95"}},InvName,InvName+"Label");ui.Add(new CuiLabel{Text={Text="\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"+string.Format(Locale(player).TitleHelp2),Align=TextAnchor.UpperLeft,Color="1 1 1 1",FadeIn=fade_in,FontSize=14},RectTransform={AnchorMin="0.05 0.05",AnchorMax="0.95 0.95"}},InvName,InvName+"Label");ui.Add(new CuiLabel{Text={Text="\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"+string.Format(Locale(player).TitleHelp3),Align=TextAnchor.UpperLeft,Color="1 1 1 1",FadeIn=fade_in,FontSize=14},RectTransform={AnchorMin="0.05 0.05",AnchorMax="0.95 0.95"}},InvName,InvName+"Label");CuiHelper.DestroyUi(player.Player,InvName);CuiHelper.AddUi(player.Player,ui);player.InventoryTime=DateTime.Now.AddSeconds(10);}catch{Chat(player,player.Locale.FailedToUseInventory);throw;}}void InvShow(BasePlayer base_player,int page_num){if(page_num<0)page_num=0;var player=Player(base_player);ApiExec(null,"client.getInventory",new Dictionary<string,object>(){{"siteId",SiteId},{"clientSid",player.PlayerId},{"criteria",new{_start=page_num*10,_limit=10}}},(r)=>{player.Inventory=(JArray)r.Data["response"]["result"];player.InventoryCount=(int)r.Data["response"]["count"];int total_pages=player.InventoryCount<10?1:(int)Math.Ceiling(player.InventoryCount/10.0f);if(page_num>=total_pages)page_num=total_pages-1;player.InventoryPage=page_num;player.InventoryTotalPages=total_pages;InvDraw(player);},(r,e)=>ApiFailed(player,r,e));}string InvDeliverCheck(PlayerData player,JObject equip,string errors){var count=(int)equip["count"];var info=(JObject)equip["info"];var bp_path=(string)info["bpPath"];var item=ItemManager.FindItemDefinition(bp_path);if(item==null){errors+=(!string.IsNullOrEmpty(errors)?", ":"")+string.Format(player.Locale.ItemNotFound,bp_path);return errors;}var inv=player.Player.inventory;var inv_capacity=inv.containerMain.capacity+inv.containerBelt.capacity;var stack_size=item.stackable>1?item.stackable:1;var stack_slots=(int)Math.Ceiling((double)count/stack_size);var after_slots=inv.containerMain.itemList.Count+inv.containerBelt.itemList.Count+stack_slots;if(after_slots>inv_capacity){errors+=(!string.IsNullOrEmpty(errors)?", ":"")+string.Format(player.Locale.RequireMoreSlots,after_slots-inv_capacity);return errors;}return errors;}void InvDeliver(PlayerData player,JObject equip,ref string player_message,ref string log_message,ref string log_error_message,ItemAffixes affixes){var count=(int)equip["count"];var info=(JObject)equip["info"];var type=(string)info["type"];var name=(string)info["name"];var class_name=(string)info["className"];var bp_path=(string)info["bpPath"];var item=ItemManager.FindItemDefinition(bp_path);if(item==null){log_error_message+="item '"+bp_path+"' not found";return;}var inv=player.Player.inventory;var inv_capacity=inv.containerMain.capacity+inv.containerBelt.capacity;var stack_size=item.stackable>1?item.stackable:1;var stack_slots=(int)Math.Ceiling((double)count/stack_size);var after_slots=inv.containerMain.itemList.Count+inv.containerBelt.itemList.Count+stack_slots;if(after_slots>inv_capacity){log_error_message+="need more slots: "+(after_slots-inv_capacity);return;}if(affixes.IsBlueprint){player.Player.blueprints.Unlock(item);log_message+=" - blueprint unlocked!";}else{for(var i=count;i>0;i-=stack_size){var gave=ItemManager.Create(item,i>stack_size?stack_size:i,0);player.Player.GiveItem(gave);if(gave.info.shortname=="smallwaterbottle"&&gave.contents!=null){var water=ItemManager.CreateByName("water",250);water?.MoveToContainer(gave.contents);}}}}void CmdDeliver(PlayerData player,JObject cmd,JObject slot,ref string player_message,ref string log_message,ref string log_error_message){var command=(string)cmd["raw"];command=command.Replace("{player.sid}",player.PlayerId);command=command.Replace("{player.name}",player.Player.displayName);command=command.Replace("{item.name}",(string)slot["title"]);command=command.Replace("{item.count}",((int)slot["count"]).ToString());command=command.Replace("{item.price}",((long)slot["meta"]["_sale"]["price"]).ToString());command=command.Replace("{item.id}",(string)slot["_id"]);ConsoleSystem.Run(ConsoleSystem.Option.Server.Quiet(),command);log_message+=command+". ";}string InvGiveCheck(PlayerData player,JObject slot){if(player.Player.IsDead()||player.Player.IsWounded()||player.Player.IsSleeping()||player.Player.IsSpectating())return player.Locale.YourCharacterMustBeConcious;var errors=(string)null;var equips=(JArray)slot["content"]["equips"];if(equips!=null)for(int i=0;i<equips.Count;i++)errors=InvDeliverCheck(player,(JObject)equips[i],errors);return errors;}void InvGive(PlayerData player,JObject slot,int quantity){var title=(string)slot["title"];var player_message=title;var log_message=string.Format(Locale().Purshase_0_for_1_,(string)slot["title"],player.PlayerId);var affixes=new ItemAffixes(title);var error_message="";try{var equips=(JArray)slot["content"]["equips"];if(equips!=null)for(int q=quantity;q>0;q--)for(int i=0;i<equips.Count;i++)InvDeliver(player,(JObject)equips[i],ref player_message,ref log_message,ref error_message,affixes);var cmds=(JArray)slot["content"]["cmds"];if(cmds!=null)for(int q=quantity;q>0;q--)for(int i=0;i<cmds.Count;i++)CmdDeliver(player,(JObject)cmds[i],slot,ref player_message,ref log_message,ref error_message);}catch(Exception e){error_message=e.Message+" - "+e.StackTrace;}if(string.IsNullOrEmpty(error_message)){if(affixes.IsBlueprint)Chat(player,player.Locale.Unlocked_0_1,player_message,"");else Chat(player,player.Locale.Delivered_0_1,player_message,"");Notify(log_message);}else{if(affixes.IsBlueprint)Chat(player,player.Locale.CannotUnlock_0_1,player_message,player.Locale.UnlockError);else Chat(player,player.Locale.CannotDeliver_0_1,player_message,player.Locale.DeliveryError);Notify(log_message);Error(error_message);}}void InvTakeAndGive(BasePlayer base_player,int position,int quantity=-1){var player=Player(base_player);if(player==null){Chat(player,player.Locale.PlayerNotFound);return;}if(player.Inventory==null){Chat(player,player.Locale.ShopUsage,"/shop");return;}if(position<0||position>=player.Inventory.Count){Chat(player,player.Locale.NoSuchPosition);return;}var slot_id=(string)player.Inventory[position]["_id"];ApiExec(null,"client.getInventorySlot",new Dictionary<string,object>(){{"siteId",SiteId},{"clientSid",player.PlayerId},{"slotId",slot_id}},(r)=>{try{var slot=(JObject)r.Data["response"];if(quantity<0)quantity=(int)slot["count"];else if((int)slot["count"]<quantity){Chat(player,player.Locale.CountNotEnough);return;}var error=InvGiveCheck(player,slot);if(error!=null){Chat(player,player.Locale.CannotDeliver_0_1,(string)slot["title"],error);return;}ApiExec(null,"items.activate",new Dictionary<string,object>(){{"siteId",SiteId},{"clientSid",player.PlayerId},{"slotId",slot_id},{"quantity",quantity}},(a)=>{InvGive(player,slot,quantity);player.Inventory[position]["count"]=(int)player.Inventory[position]["count"]-quantity;InvDraw(player,true);},(a,e)=>ApiFailed(player,a,e));}catch{Chat(player,player.Locale.FailedToUseSlot);throw;}},(r,e)=>ApiFailed(player,r,e));}void InvFrame(){if(DateTime.Now<NextTimerUpdate)return;foreach(var kv in Players)if(kv.Value.InventoryTime>DateTime.MinValue&&kv.Value.InventoryTime<DateTime.Now){CuiHelper.DestroyUi(kv.Value.Player,InvName);kv.Value.InventoryTime=DateTime.MinValue;}NextTimerUpdate=DateTime.Now.AddSeconds(1);}void InvUnload(){for(var i=0;i<BasePlayer.activePlayerList.Count;i++)CuiHelper.DestroyUi(BasePlayer.activePlayerList[i],InvName);}void StoreCmd(BasePlayer base_player,string command,string[]args){try{if(!ShopRegistered){Chat(base_player,Locale(base_player).ShopNotRegistered);return;}int page_num=0;try{if(args.Length==1)page_num=int.Parse(args[0])-1;else if(args.Length!=0)throw new Exception("Bad args count");}catch{Chat(base_player,Locale(base_player).ShopUsage,command);return;}InvShow(base_player,page_num);}catch(Exception e){Error(Locale().InventoryFailedToShow,e.Message,command+" "+string.Join(" ",args));}}void GiveCmd(BasePlayer base_player,string command,string[]args){try{if(!ShopRegistered){Chat(base_player,Locale(base_player).ShopNotRegistered);return;}int position=0;int quantity=1;try{if(args.Length==1)position=int.Parse(args[0])-1;else if(args.Length==2){position=int.Parse(args[0])-1;quantity=int.Parse(args[1]);if(quantity<=0)throw new Exception("Bad quantity");}else throw new Exception("Bad args count");}catch{Chat(base_player,Locale(base_player).ShopGiveUsage,command);return;}InvTakeAndGive(base_player,position,quantity);}catch(Exception e){Error(Locale().InventoryFailedToTake,e.Message,command+" "+string.Join(" ",args));}}void GiveAllCmd(BasePlayer base_player,string command,string[]args){try{if(!ShopRegistered){Chat(base_player,Locale(base_player).ShopNotRegistered);return;}int position=0;try{if(args.Length==1)position=int.Parse(args[0])-1;else throw new Exception("Bad args count");}catch{Chat(base_player,Locale(base_player).ShopGiveUsage,command);return;}InvTakeAndGive(base_player,position,-1);}catch(Exception e){Error(Locale().InventoryFailedToTakeAll,e.Message,command+" "+string.Join(" ",args));}}void LocaleEnCmd(BasePlayer base_player,string command,string[]args){try{LocaleSet(Player(base_player),LocaleEn);}catch(Exception e){Error(Locale().LocaleFailed,e.Message,command+" "+string.Join(" ",args));}}void LocaleRuCmd(BasePlayer base_player,string command,string[]args){try{LocaleSet(Player(base_player),LocaleRu);}catch(Exception e){Error(Locale().LocaleFailed,e.Message,command+" "+string.Join(" ",args));}}bool ReloadCmd(ConsoleSystem.Arg arg){LoadConfig();return true;}bool StateCmd(ConsoleSystem.Arg arg){Notify("{0} ({1}) (c) {2}",SurvivalShopPluginInfo.Name,SurvivalShopPluginInfo.Version,SurvivalShopPluginInfo.Copyright);Notify(Locale().Status01,ShopRegistered,SiteId);Notify(Locale().Status02,ShopServerId,ShopHello);Notify(Locale().Status03,Locale().Locale);Notify(Locale().Status04,Players.Count);int numRequests=0;foreach(var kv in ApiRequests)numRequests+=kv.Value.Count;Notify(Locale().Status05,numRequests);return true;}bool SetupCmd(ConsoleSystem.Arg arg){if(arg.Args.Length==2){SetupConfig(arg.Args[0],arg.Args[1],null);}else if(arg.Args.Length==3){SetupConfig(arg.Args[0],arg.Args[1],arg.Args[2]);}else Notify(Locale().ShopSetupUsage,arg.cmd.Name);Notify(Locale().SetupOk);return true;}void OnServerInitialized(){try{Notify("========== LOADING ==========");LoadConfig();ApiInit();LocaleInit();InvInit();var commands=GetLibrary<Command>();commands.AddConsoleCommand("survivalshop.setup",this,SetupCmd);commands.AddConsoleCommand("survivalshop.reload",this,ReloadCmd);commands.AddConsoleCommand("survivalshop.status",this,StateCmd);commands.AddChatCommand("store",this,StoreCmd);commands.AddChatCommand("shop",this,StoreCmd);commands.AddChatCommand("give",this,GiveCmd);commands.AddChatCommand("take",this,GiveCmd);commands.AddChatCommand("магазин",this,StoreCmd);commands.AddChatCommand("магаз",this,StoreCmd);commands.AddChatCommand("м",this,StoreCmd);commands.AddChatCommand("v",this,StoreCmd);commands.AddChatCommand("шоп",this,StoreCmd);commands.AddChatCommand("взять",this,GiveCmd);commands.AddChatCommand("в",this,GiveCmd);commands.AddChatCommand("d",this,StoreCmd);commands.AddChatCommand("giveall",this,GiveAllCmd);commands.AddChatCommand("takeall",this,GiveAllCmd);commands.AddChatCommand("взятьвсе",this,GiveAllCmd);commands.AddChatCommand("вв",this,GiveAllCmd);commands.AddChatCommand("en",this,LocaleEnCmd);commands.AddChatCommand("ru",this,LocaleRuCmd);}catch(Exception e){Error(e,"OnServerInitialized");}ServerInitialized=true;}void OnPlayerDisconnected(BasePlayer player,string reason){if(!ServerInitialized)return;try{Debug("Player {0} disconnected",player.UserIDString);Players.Remove(player.UserIDString);}catch(Exception e){Error(e,"OnPlayerDisconnected");}}void OnPlayerConnected(BasePlayer player){if(!ServerInitialized)return;try{Chat(player,Player(player).Locale.ShopHello);Debug("Player {0} connected",Player(player).PlayerId);}catch(Exception e){Error(e,"OnPlayerConnected");}}void OnFrame(){if(!ServerInitialized)return;try{ApiFrame();InvFrame();}catch(Exception e){Error(e,"OnFrame");}}void OnTick(){if(!ServerInitialized)return;try{ApiTick();}catch(Exception e){Error(e,"OnTick");}}void Loaded(){HasConfig=true;Plugin=this;Players=new Dictionary<string,PlayerData>();}void Unload(){InvUnload();LocaleUnload();ApiUnload();Players.Clear();}void OnServerShutdown(){Notify("========== SHUTDOWN ==========");}}}